AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::LanguageExtensions # for Fn::ToJsonString, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ToJsonString.html
Description: >
  sam-chat-boilerplate

  SAM Template for WebSocket based LLM chat application
  using AWS API Gateway WebSocket API and Lambda.

Parameters:
  WebSocketAPIName:
    Type: String
    Default: SamChatWebSocketAPI
    Description: (Required) The name of the API Gateway WebSocket API.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Handler: app.handler
    Runtime: python3.12
    # the timeout of the API Gateway WebSocket proxy integration is 29s
    # but we use Lambda async invocation for llm related functions
    # so it's safe to set this greater than 29
    Timeout: 300

Resources:
  # websocket api
  WebSocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref WebSocketAPIName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  # TODO: auto re-deploy
  WebSocketAPIDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - LangChainFireworksMixtralMoE8x7BInstructRoute
      - LangChainFireworksLlama270BChatRoute
      - LangChainFireworksChineseLlama2LoRA7BRoute
      - LangChainFireworksFireFunctionV1Route
      - LangChainFireworksDBRXInstructRoute
      - LangChainFireworksLlama213BFrenchRoute
      - LangChainFireworksYi34BChatRoute
      - LangChainFireworksNousHermes2Mixtral8x7BRoute
      - LangChainFireworksQwen14BChatRoute
      - LangChainFireworksMistral7BInstructRoute
      - LangChainDeepinfraPygmalion13b4bit128gRoute
      - LangChainDeepinfraDolphin26mixtral8x7bRoute
      - LangChainDeepinfraAiroboros70bRoute
      - LangChainDeepinfraLzlv70bfp16hfRoute
      - LangChainDeepinfraAiroborosl270bgpt4141Route
      - LangChainDeepinfraMixtral8x7BInstructv01Route
      - LangChainDeepinfraMistral7BInstructv01Route
      - LangChainDeepinfraGrypheMythonMaxL213bRoute
      - LangChainMistralMediumRoute
      - LangChainBedrockRoute
      - LangChainOpenAIRoute
      - ModifyCharacterDefinitionRoute
      - BedrockRoute
      - OnConnectRoute
      - OnDefaultRoute
      - OnDisconnectRoute
    Properties:
      ApiId: !Ref WebSocketAPI
  WebSocketAPIProductionStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Production
      DeploymentId: !Ref WebSocketAPIDeployment
      ApiId: !Ref WebSocketAPI

  CharacterDefinition:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  SessionTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: SessionId
        Type: String

  # langchain/bedrock
  LangChainBedrockRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/bedrock
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainBedrockIntegration
  LangChainBedrockIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS # use non-proxy integration to invoke lambda async
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainBedrockFunction.Arn}/invocations
      RequestParameters:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-integration-async.html
        &AsyncLambdaIntegrationRequestParameters
        integration.request.header.X-Amz-Invocation-Type: "'Event'"
      RequestTemplates:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-mapping-template-reference.html
        &AsyncLambdaIntegrationRequestTemplates
        application/json: |
          {
            "requestContext": {
              "domainName": "$context.domainName",
              "stage": "$context.stage",
              "connectionId": "$context.connectionId"
            },
            "body": $input.body
          }
  LangChainBedrockFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/bedrock/
      Layers:
        - !Ref LangChainCommonLayer
      Environment:
        Variables:
          SessionTableName: !Ref SessionTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
            - Effect: Allow
              Action:
                - "bedrock:InvokeModel"
                - "bedrock:InvokeModelWithResponseStream"
              Resource:
                - "arn:aws:bedrock:*::foundation-model/*"
  LangChainBedrockPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainBedrockFunction
      Principal: apigateway.amazonaws.com

  # langchain/openai
  LangChainOpenAIRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/openai
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainOpenAIIntegration
  LangChainOpenAIIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainOpenAIFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainOpenAIFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/openai/
      Layers:
        - !Ref LangChainCommonLayer
      Environment:
        Variables:
          OpenAI_API_Base: http://neural-chat-q5-114160182.us-west-2.elb.amazonaws.com/v1
          OpenAI_API_Key: "123"
          SessionTableName: !Ref SessionTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainOpenAIPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainOpenAIFunction
      Principal: apigateway.amazonaws.com



  # langchain/mistral/medium
  LangChainMistralMediumRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/mistral/medium
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainMistralMediumIntegration
  LangChainMistralMediumIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainMistralMediumFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainMistralMediumFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/mistral/
      Layers:
        - !Ref LangChainCommonLayer
      Environment:
        Variables:
          Mistral_API_Base: "https://api.mistral.ai/v1/chat/completions"
          Mistral_API_Key: "pv1Rl69upV9DiOVAlBVfhwUCmCJXfVe0"
          Mistral_Model_Name: "mistral-medium"
          SessionTableName: !Ref SessionTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainMistralMediumPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainMistralMediumFunction
      Principal: apigateway.amazonaws.com




      # langchain/deepinfra/Gryphe-MythoMax-L2-13b
  LangChainDeepinfraGrypheMythonMaxL213bRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/deepinfra/MythoMax-L2-13b
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainDeepinfraGrypheMythonMaxL213bIntegration
  LangChainDeepinfraGrypheMythonMaxL213bIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainDeepinfraGrypheMythonMaxL213bFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainDeepinfraGrypheMythonMaxL213bFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/deepinfra/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.deepinfra.com/v1/openai"
          API_Key: "1iubpJyGRvVCwIcbwaamAro95AqWR9mE"
          Model_Name: "Gryphe/MythoMax-L2-13b"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainDeepinfraGrypheMythonMaxL213bPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainDeepinfraGrypheMythonMaxL213bFunction
      Principal: apigateway.amazonaws.com


 # langchain/deepinfra/Mistral-7B-Instruct-v0.1
  LangChainDeepinfraMistral7BInstructv01Route:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/deepinfra/Mistral-7B-Instruct-v0.1
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainDeepinfraMistral7BInstructv01Integration
  LangChainDeepinfraMistral7BInstructv01Integration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainDeepinfraMistral7BInstructv01Function.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainDeepinfraMistral7BInstructv01Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/deepinfra/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.deepinfra.com/v1/openai"
          API_Key: "1iubpJyGRvVCwIcbwaamAro95AqWR9mE"
          Model_Name: "mistralai/Mistral-7B-Instruct-v0.1"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainDeepinfraMistral7BInstructv01Permission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainDeepinfraMistral7BInstructv01Function
      Principal: apigateway.amazonaws.com



      # langchain/deepinfra/Mixtral-8x7B-Instruct-v0.1
  LangChainDeepinfraMixtral8x7BInstructv01Route:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/deepinfra/Mixtral-8x7B-Instruct-v0.1
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainDeepinfraMixtral8x7BInstructv01Integration
  LangChainDeepinfraMixtral8x7BInstructv01Integration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainDeepinfraMixtral8x7BInstructv01Function.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainDeepinfraMixtral8x7BInstructv01Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/deepinfra/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.deepinfra.com/v1/openai"
          API_Key: "1iubpJyGRvVCwIcbwaamAro95AqWR9mE"
          Model_Name: "mistralai/Mixtral-8x7B-Instruct-v0.1"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainDeepinfraMixtral8x7BInstructv01Permission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainDeepinfraMixtral8x7BInstructv01Function
      Principal: apigateway.amazonaws.com


       # langchain/deepinfra/airoboros-l2-70b-gpt4-1.4.1
  LangChainDeepinfraAiroborosl270bgpt4141Route:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/deepinfra/airoboros-l2-70b-gpt4-1.4.1
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainDeepinfraAiroborosl270bgpt4141Integration
  LangChainDeepinfraAiroborosl270bgpt4141Integration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainDeepinfraAiroborosl270bgpt4141Function.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainDeepinfraAiroborosl270bgpt4141Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/deepinfra/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.deepinfra.com/v1/openai"
          API_Key: "1iubpJyGRvVCwIcbwaamAro95AqWR9mE"
          Model_Name: "jondurbin/airoboros-l2-70b-gpt4-1.4.1"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainDeepinfraAiroborosl270bgpt4141Permission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainDeepinfraAiroborosl270bgpt4141Function
      Principal: apigateway.amazonaws.com



      # langchain/deepinfra/lzlv_70b_fp16_hf
  LangChainDeepinfraLzlv70bfp16hfRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/deepinfra/lzlv_70b_fp16_hf
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainDeepinfraLzlv70bfp16hfIntegration
  LangChainDeepinfraLzlv70bfp16hfIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainDeepinfraLzlv70bfp16hfFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainDeepinfraLzlv70bfp16hfFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/deepinfra/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.deepinfra.com/v1/openai"
          API_Key: "1iubpJyGRvVCwIcbwaamAro95AqWR9mE"
          Model_Name: "lizpreciatior/lzlv_70b_fp16_hf"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainDeepinfraLzlv70bfp16hfPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainDeepinfraLzlv70bfp16hfFunction
      Principal: apigateway.amazonaws.com



# langchain/deepinfra/airoboros-70b
  LangChainDeepinfraAiroboros70bRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/deepinfra/airoboros-70b
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainDeepinfraAiroboros70bIntegration
  LangChainDeepinfraAiroboros70bIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainDeepinfraAiroboros70bFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainDeepinfraAiroboros70bFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/deepinfra/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.deepinfra.com/v1/openai"
          API_Key: "1iubpJyGRvVCwIcbwaamAro95AqWR9mE"
          Model_Name: "deepinfra/airoboros-70b"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainDeepinfraAiroboros70bPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainDeepinfraAiroboros70bFunction
      Principal: apigateway.amazonaws.com


# langchain/deepinfra/dolphin-2.6-mixtral-8x7b
  LangChainDeepinfraDolphin26mixtral8x7bRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/deepinfra/dolphin-2.6-mixtral-8x7b
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainDeepinfraDolphin26mixtral8x7bIntegration
  LangChainDeepinfraDolphin26mixtral8x7bIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainDeepinfraDolphin26mixtral8x7bFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainDeepinfraDolphin26mixtral8x7bFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/deepinfra/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.deepinfra.com/v1/openai"
          API_Key: "1iubpJyGRvVCwIcbwaamAro95AqWR9mE"
          Model_Name: "cognitivecomputations/dolphin-2.6-mixtral-8x7b"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainDeepinfraDolphin26mixtral8x7bPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainDeepinfraDolphin26mixtral8x7bFunction
      Principal: apigateway.amazonaws.com

      # langchain/deepinfra/pygmalion-13b-4bit-128g
  LangChainDeepinfraPygmalion13b4bit128gRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/deepinfra/pygmalion-13b-4bit-128g
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainDeepinfraPygmalion13b4bit128gIntegration
  LangChainDeepinfraPygmalion13b4bit128gIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainDeepinfraPygmalion13b4bit128gFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainDeepinfraPygmalion13b4bit128gFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/deepinfra/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.deepinfra.com/v1/openai"
          API_Key: "1iubpJyGRvVCwIcbwaamAro95AqWR9mE"
          Model_Name: "DeepInfra/pygmalion-13b-4bit-128g"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainDeepinfraPygmalion13b4bit128gPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainDeepinfraPygmalion13b4bit128gFunction
      Principal: apigateway.amazonaws.com


       # langchain/fireworks/Mixtral-MoE-8x7B-Instruct
  LangChainFireworksMixtralMoE8x7BInstructRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/fireworks/Mixtral-MoE-8x7B-Instruct
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainFireworksMixtralMoE8x7BInstructIntegration
  LangChainFireworksMixtralMoE8x7BInstructIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainFireworksMixtralMoE8x7BInstructFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainFireworksMixtralMoE8x7BInstructFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/fireworks/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.fireworks.ai/inference/v1/chat/completions"
          API_Key: "WglavV6hm0RLeZohaDZcrEjGAedu04GnJbDazBJ2PzmY7nRl"
          Model_Name: "accounts/fireworks/models/mixtral-8x7b-instruct"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainFireworksMixtralMoE8x7BInstructPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainFireworksMixtralMoE8x7BInstructFunction
      Principal: apigateway.amazonaws.com



      # langchain/fireworks/Llama-2-70B-Chat
  LangChainFireworksLlama270BChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/fireworks/Llama-2-70B-Chat
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainFireworksLlama270BChatIntegration
  LangChainFireworksLlama270BChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainFireworksLlama270BChatFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainFireworksLlama270BChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/fireworks/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.fireworks.ai/inference/v1/chat/completions"
          API_Key: "WglavV6hm0RLeZohaDZcrEjGAedu04GnJbDazBJ2PzmY7nRl"
          Model_Name: "accounts/fireworks/models/llama-v2-70b-chat"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainFireworksLlama270BChatPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainFireworksLlama270BChatFunction
      Principal: apigateway.amazonaws.com


      # langchain/fireworks/Chinese-Llama-2-LoRA-7B
  LangChainFireworksChineseLlama2LoRA7BRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/fireworks/Chinese-Llama-2-LoRA-7B
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainFireworksChineseLlama2LoRA7BIntegration
  LangChainFireworksChineseLlama2LoRA7BIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainFireworksChineseLlama2LoRA7BFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainFireworksChineseLlama2LoRA7BFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/fireworks/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.fireworks.ai/inference/v1/chat/completions"
          API_Key: "WglavV6hm0RLeZohaDZcrEjGAedu04GnJbDazBJ2PzmY7nRl"
          Model_Name: "accounts/fireworks/models/chinese-llama-2-lora-7b"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainFireworksChineseLlama2LoRA7BPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainFireworksChineseLlama2LoRA7BFunction
      Principal: apigateway.amazonaws.com


      # langchain/fireworks/FireFunction-V1
  LangChainFireworksFireFunctionV1Route:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/fireworks/FireFunction-V1
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainFireworksFireFunctionV1Integration
  LangChainFireworksFireFunctionV1Integration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainFireworksFireFunctionV1Function.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainFireworksFireFunctionV1Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/fireworks/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.fireworks.ai/inference/v1/chat/completions"
          API_Key: "WglavV6hm0RLeZohaDZcrEjGAedu04GnJbDazBJ2PzmY7nRl"
          Model_Name: "accounts/fireworks/models/firefunction-v1"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainFireworksFireFunctionV1Permission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainFireworksFireFunctionV1Function
      Principal: apigateway.amazonaws.com


       # langchain/fireworks/DBRX-Instruct
  LangChainFireworksDBRXInstructRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/fireworks/DBRX-Instruct
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainFireworksDBRXInstructIntegration
  LangChainFireworksDBRXInstructIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainFireworksDBRXInstructFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainFireworksDBRXInstructFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/fireworks/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.fireworks.ai/inference/v1/chat/completions"
          API_Key: "WglavV6hm0RLeZohaDZcrEjGAedu04GnJbDazBJ2PzmY7nRl"
          Model_Name: "accounts/fireworks/models/dbrx-instruct"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainFireworksDBRXInstructPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainFireworksDBRXInstructFunction
      Principal: apigateway.amazonaws.com


      # langchain/fireworks/Llama-2-13B-French
  LangChainFireworksLlama213BFrenchRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/fireworks/Llama-2-13B-French
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainFireworksLlama213BFrenchIntegration
  LangChainFireworksLlama213BFrenchIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainFireworksLlama213BFrenchFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainFireworksLlama213BFrenchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/fireworks/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.fireworks.ai/inference/v1/chat/completions"
          API_Key: "WglavV6hm0RLeZohaDZcrEjGAedu04GnJbDazBJ2PzmY7nRl"
          Model_Name: "accounts/fireworks/models/llama-2-13b-fp16-french"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainFireworksLlama213BFrenchPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainFireworksLlama213BFrenchFunction
      Principal: apigateway.amazonaws.com


      # langchain/fireworks/Yi-34B-Chat
  LangChainFireworksYi34BChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/fireworks/Yi-34B-Chat
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainFireworksYi34BChatIntegration
  LangChainFireworksYi34BChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainFireworksYi34BChatFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainFireworksYi34BChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/fireworks/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.fireworks.ai/inference/v1/chat/completions"
          API_Key: "WglavV6hm0RLeZohaDZcrEjGAedu04GnJbDazBJ2PzmY7nRl"
          Model_Name: "accounts/fireworks/models/yi-34b-chat"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainFireworksYi34BChatPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainFireworksYi34BChatFunction
      Principal: apigateway.amazonaws.com
 

  # langchain/fireworks/Nous-Hermes-2-Mixtral-8x7B
  LangChainFireworksNousHermes2Mixtral8x7BRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/fireworks/Nous-Hermes-2-Mixtral-8x7B
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainFireworksNousHermes2Mixtral8x7BIntegration
  LangChainFireworksNousHermes2Mixtral8x7BIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainFireworksNousHermes2Mixtral8x7BFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainFireworksNousHermes2Mixtral8x7BFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/fireworks/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.fireworks.ai/inference/v1/chat/completions"
          API_Key: "WglavV6hm0RLeZohaDZcrEjGAedu04GnJbDazBJ2PzmY7nRl"
          Model_Name: "accounts/fireworks/models/nous-hermes-2-mixtral-8x7b-dpo-fp8"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainFireworksNousHermes2Mixtral8x7BPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainFireworksNousHermes2Mixtral8x7BFunction
      Principal: apigateway.amazonaws.com


      # langchain/fireworks/Qwen-14B-Chat
  LangChainFireworksQwen14BChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/fireworks/Qwen-14B-Chat
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainFireworksQwen14BChatIntegration
  LangChainFireworksQwen14BChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainFireworksQwen14BChatFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainFireworksQwen14BChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/fireworks/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.fireworks.ai/inference/v1/chat/completions"
          API_Key: "WglavV6hm0RLeZohaDZcrEjGAedu04GnJbDazBJ2PzmY7nRl"
          Model_Name: "accounts/fireworks/models/qwen-14b-chat"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainFireworksQwen14BChatPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainFireworksQwen14BChatFunction
      Principal: apigateway.amazonaws.com



# langchain/fireworks/Mistral-7B-Instruct
  LangChainFireworksMistral7BInstructRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: langchain/fireworks/Mistral-7B-Instruct
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LangChainFireworksMistral7BInstructIntegration
  LangChainFireworksMistral7BInstructIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LangChainFireworksMistral7BInstructFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  LangChainFireworksMistral7BInstructFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: langchain/fireworks/
      Layers:
        - !Ref LangChainCommonLayer
        - !Ref CommonLayer
      Environment:
        Variables:
          API_Base: "https://api.fireworks.ai/inference/v1/chat/completions"
          API_Key: "WglavV6hm0RLeZohaDZcrEjGAedu04GnJbDazBJ2PzmY7nRl"
          Model_Name: "accounts/fireworks/models/mistral-7b-instruct-4k"
          SessionTableName: !Ref SessionTable
          CDTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  LangChainFireworksMistral7BInstructPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LangChainFireworksMistral7BInstructFunction
      Principal: apigateway.amazonaws.com



      # ModifyCharacterDefinitionRoute
  ModifyCharacterDefinitionRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: ModifyCharacterDefinition
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ModifyCharacterDefinitionIntegration
  ModifyCharacterDefinitionIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ModifyCharacterDefinitionFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  ModifyCharacterDefinitionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: game/modify-character-definition/
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          SessionTableName: !Ref CharacterDefinition
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CharacterDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
  ModifyCharacterDefinitionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - CharacterDefinition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ModifyCharacterDefinitionFunction
      Principal: apigateway.amazonaws.com


  # bedrock
  BedrockRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: bedrock
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref BedrockIntegration
  BedrockIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockFunction.Arn}/invocations
      RequestParameters: *AsyncLambdaIntegrationRequestParameters
      RequestTemplates: *AsyncLambdaIntegrationRequestTemplates
  BedrockFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bedrock/
      Environment:
        Variables:
          SessionTableName: !Ref SessionTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*"
            - Effect: Allow
              Action:
                - "bedrock:InvokeModel"
                - "bedrock:InvokeModelWithResponseStream"
              Resource:
                - "arn:aws:bedrock:*::foundation-model/*"
  BedrockPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
      - SessionTable
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BedrockFunction
      Principal: apigateway.amazonaws.com

  # $connect
  OnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref OnConnectIntegration
  OnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: connect/
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  # $disconnect
  OnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref OnDisconnectIntegration
  OnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: disconnect/
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  # $default
  OnDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref OnDefaultIntegration
  OnDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri:
        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDefaultFunction.Arn}/invocations
  OnDefaultRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteId: !Ref OnDefaultRoute
      RouteResponseKey: $default
  OnDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: default/
  OnDefaultPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDefaultFunction
      Principal: apigateway.amazonaws.com

  # lambda layer
  LangChainCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layer/langchain_common/
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

  # common layer
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layer/common/
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

Outputs:
  WebSocketAPIEndpoint:
    Value:
      !Join [
        "",
        [
          "wss://",
          !Ref WebSocketAPI,
          ".execute-api.",
          !Ref "AWS::Region",
          ".amazonaws.com/",
          !Ref "WebSocketAPIProductionStage",
        ],
      ]